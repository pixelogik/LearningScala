// The MIT License (MIT)

// Copyright (c) 2015 Ole Krause-Sparmann

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// From http://docs.scala-lang.org/tutorials/tour/sequence-comprehensions.html: 
//
// Scala offers a lightweight notation for expressing sequence comprehensions. 
// Comprehensions have the form for (enumerators) yield e, where enumerators refers 
// to a semicolon-separated list of enumerators. An enumerator is either a generator 
// which introduces new variables, or it is a filter. A comprehension evaluates the 
// body e for each binding generated by the enumerators and returns a sequence of these values.
//

//////////////////////////////////////////////////////////////////////////////////////////

// Base type for food type
class FoodType 

// Specific food types
case object SideDish extends FoodType 
case object Vegetable extends FoodType 
case object Meat extends FoodType 

// Type for food items
case class FoodItem(name: String, foodType: FoodType)

// Type for meals
case class Meal(sideDish: FoodItem, vegetable: FoodItem, meat: FoodItem)

//////////////////////////////////////////////////////////////////////////////////////////

object Meal {

	def makeMealsFromFoodItems(foodItems: List[FoodItem]) : List[Meal] = {

		val sideDishes = foodItems.filter( x => x.foodType == SideDish )
		val vegetables = foodItems.filter( x => x.foodType == Vegetable )
		val meats = foodItems.filter( x => x.foodType == Meat )

		for (s <- sideDishes ; v <- vegetables ; m <- meats) yield Meal(s, v, m)
	}

}




//////////////////////////////////////////////////////////////////////////////////////////


